buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: "net.minecraftforge.gradle.forge"

version = modVersion
group = modGroup
archivesBaseName = modBaseName

minecraft {
    version = project.forgeVersion
    runDir = "run"

    mappings = project.mcpVersion

  //  replace 'GRADLE:VERSION', "$modversion"
    replace 'required-before:librarianlib', 'required-before:librarianlib@' + liblib_version

    replaceIn 'Wizardry.java'

    clientJvmArgs = ["-Dfml.coreMods.load=$core_plugin,com.teamwizardry.librarianlib.asm.LibLibCorePlugin"]
    serverJvmArgs = ["-Dfml.coreMods.load=$core_plugin,com.teamwizardry.librarianlib.asm.LibLibCorePlugin"]
}

repositories {
    mavenCentral()
    maven { url = "http://maven.bluexin.be/repository/snapshots/" }
    maven { url = "http://dvs1.progwml6.com/files/maven" }
    maven { url = "http://tehnut.info/maven" }
    maven { url = "http://maven.tterrag.com/" }
    maven { url = "http://maven.thiakil.com" }
}

dependencies {
    compile "com.teamwizardry.librarianlib:librarianlib-1.12.2:$liblib_version-SNAPSHOT:deobf"
    deobfCompile "mezz.jei:jei_1.12:$jei_version:api"
    runtime "mezz.jei:jei_1.12:$jei_version"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}
